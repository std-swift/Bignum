//
//  BigIntTests.swift
//  BignumTests
//

import XCTest
import Bignum

final class BigIntTests: XCTestCase {
	private static func genString(_ range: Range<Int>, _ count: Int) -> String {
		let digits = (0..<count).map { _ in range.randomElement()! }
		return digits.reduce(into: "1") { $0 += "\($1)" }
	}
	
	private static func genString2(_ range: Range<Int>, _ count: Int) -> String {
		let digits = (0..<count).map { _ in range.randomElement()! }
		return digits.reduce(into: "-1") { $0 += "\($1)" }
	}
	
	private static func AssertStringInit(_ radix: Int, _ count: Int) {
		let string = BigIntTests.genString(0..<radix, count)
		guard let BigInt = BigInt(string, radix: radix) else {
			XCTFail("BigInt from /\(radix):\(count): \"\(string)\"")
			return
		}
		XCTAssertEqual(String(BigInt, radix: radix), string)
	}
	
	private static func AssertStringInit2(_ radix: Int, _ count: Int) {
		let string = BigIntTests.genString2(0..<radix, count)
		guard let BigInt = BigInt(string, radix: radix) else {
			XCTFail("BigInt from /\(radix):\(count): \"\(string)\"")
			return
		}
		XCTAssertEqual(String(BigInt, radix: radix), string)
	}
	
	private static func genString(_ range: [Character], _ count: Int) -> String {
		let digits = (0..<count).map { _ in range.randomElement()! }
		return digits.reduce(into: "1") { $0 += "\($1)" }
	}
	
	private static func genString2(_ range: [Character], _ count: Int) -> String {
		let digits = (0..<count).map { _ in range.randomElement()! }
		return digits.reduce(into: "-1") { $0 += "\($1)" }
	}
	
	private static func AssertStringInit(_ range: [Character], _ count: Int, _ message: @autoclosure () -> String = "", file: StaticString = #file, line: UInt = #line) {
		let string = BigIntTests.genString(range, count)
		guard let BigInt = BigInt(string, radix: range.count) else {
			XCTFail("BigInt from /\(range.count):\(count): \"\(string)\"")
			return
		}
		XCTAssertEqual(String(BigInt, radix: range.count), string, message(), file: file, line: line)
	}
	
	private static func AssertStringInit2(_ range: [Character], _ count: Int, _ message: @autoclosure () -> String = "", file: StaticString = #file, line: UInt = #line) {
		let string = BigIntTests.genString2(range, count)
		guard let BigInt = BigInt(string, radix: range.count) else {
			XCTFail("BigInt from /\(range.count):\(count): \"\(string)\"")
			return
		}
		XCTAssertEqual(String(BigInt, radix: range.count), string, message(), file: file, line: line)
	}
	
	func testString2ConversionShort() {
		BigIntTests.AssertStringInit(2, 5)
		BigIntTests.AssertStringInit2(2, 5)
	}
	
	func testString2ConversionMedium() {
		BigIntTests.AssertStringInit(2, 50)
		BigIntTests.AssertStringInit2(2, 50)
	}
	
	func testString2ConversionLong() {
		BigIntTests.AssertStringInit(2, 5000)
		BigIntTests.AssertStringInit2(2, 5000)
	}
	
	func testString3ConversionShort() {
		BigIntTests.AssertStringInit(3, 5)
		BigIntTests.AssertStringInit2(3, 5)
	}
	
	func testString3ConversionMedium() {
		BigIntTests.AssertStringInit(3, 50)
		BigIntTests.AssertStringInit2(3, 50)
	}
	
	func testString3ConversionLong() {
		BigIntTests.AssertStringInit(3, 5000)
		BigIntTests.AssertStringInit2(3, 5000)
	}
	
	func testString8ConversionShort() {
		BigIntTests.AssertStringInit(8, 5)
		BigIntTests.AssertStringInit2(8, 5)
	}
	
	func testString8ConversionMedium() {
		BigIntTests.AssertStringInit(8, 50)
		BigIntTests.AssertStringInit2(8, 50)
	}
	
	func testString8ConversionLong() {
		BigIntTests.AssertStringInit(8, 5000)
		BigIntTests.AssertStringInit2(8, 5000)
	}
	
	func testString10ConversionShort() {
		BigIntTests.AssertStringInit(10, 5)
		BigIntTests.AssertStringInit2(10, 5)
	}
	
	func testString10ConversionMedium() {
		BigIntTests.AssertStringInit(10, 50)
		BigIntTests.AssertStringInit2(10, 50)
	}
	
	func testString10ConversionLong() {
		BigIntTests.AssertStringInit(10, 5000)
		BigIntTests.AssertStringInit2(10, 5000)
	}
	
	func testString16ConversionShort() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		BigIntTests.AssertStringInit(digits, 5)
		BigIntTests.AssertStringInit2(digits, 5)
	}
	
	func testString16ConversionMedium() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		BigIntTests.AssertStringInit(digits, 50)
		BigIntTests.AssertStringInit2(digits, 50)
	}
	
	func testString16ConversionLong() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		BigIntTests.AssertStringInit(digits, 5000)
		BigIntTests.AssertStringInit2(digits, 5000)
	}
	
	func testDescriptionShort() {
		XCTAssertEqual(BigInt(0).description, "0")
		XCTAssertEqual(BigInt(1).description, "1")
		XCTAssertEqual(BigInt(-1).description, "-1")
		
		let value1 = Int.random(in: 2 ... .max)
		XCTAssertEqual(BigInt(value1).description, value1.description)
		
		let value2 = Int.random(in: .min ..< -1)
		XCTAssertEqual(BigInt(value2).description, value2.description)
	}
	
	func testDescriptionMedium() {
		let string1 = BigIntTests.genString(0..<10, 100)
		guard let BigInt1 = BigInt(string1) else {
			XCTFail("BigInt from /10:100: \"\(string1)\"")
			return
		}
		XCTAssertEqual(BigInt1.description, string1)
		
		let string2 = BigIntTests.genString2(0..<10, 100)
		guard let BigInt2 = BigInt(string2) else {
			XCTFail("BigInt from /10:100: \"\(string2)\"")
			return
		}
		XCTAssertEqual(BigInt2.description, string2)
	}
	
	func testDescriptionLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		guard let BigInt1 = BigInt(string1) else {
			XCTFail("BigInt from /10:100: \"\(string1)\"")
			return
		}
		XCTAssertEqual(BigInt1.description, string1)
		
		let string2 = BigIntTests.genString2(0..<10, 5000)
		guard let BigInt2 = BigInt(string2) else {
			XCTFail("BigInt from /10:100: \"\(string2)\"")
			return
		}
		XCTAssertEqual(BigInt2.description, string2)
	}
	
	func testAdditionShort() {
		let a = Int.random(in: (.max / 100)...(.max / 3))
		let b = Int.random(in: (.max / 100)...(.max / 3))
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		XCTAssertEqual(bigA + bigB, BigInt(a + b))
		XCTAssertEqual(bigB + bigA, BigInt(a + b))
		XCTAssertEqual((-bigA) + (-bigB), -BigInt(a + b))
		XCTAssertEqual((-bigB) + (-bigA), -BigInt(a + b))
		XCTAssertEqual((-bigA) + bigB, BigInt(Int(b) - Int(a)))
		XCTAssertEqual(bigB + (-bigA), BigInt(Int(b) - Int(a)))
		XCTAssertEqual(bigA + (-bigB), BigInt(Int(a) - Int(b)))
		XCTAssertEqual((-bigB) + bigA, BigInt(Int(a) - Int(b)))
	}
	
	func testAdditionMedium() {
		let a = BigInt("49901941623239827253648045316991932868241148425724")!
		let b = BigInt("55568420995366130638535776054437464786520355331723")!
		let c = BigInt("105470362618605957892183821371429397654761503757447")!
		let d = BigInt("5666479372126303384887730737445531918279206905999")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
		XCTAssertEqual((-a) + (-b), -c)
		XCTAssertEqual((-b) + (-a), -c)
		XCTAssertEqual((-a) + b, d)
		XCTAssertEqual(b + (-a), d)
		XCTAssertEqual(a + (-b), -d)
		XCTAssertEqual((-b) + a, -d)
	}
	
	func testAdditionLong() {
		let a = BigInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("32451924656158251351573521185723935368726485261226729457943198486500683831259376369727147923324271347135131719074176353002181850279070644354050800578492350916835177207151078652887156188504161196705387562861256623990251231251600422883552137331799777727895626050736980841572280117630278431051857229922192616656023151575347824262126859139952275857661597315316871248104665866630479865052991587927303928952081663506189201445617289611224195481571677363079828074154537372607244651784755771959662705526545589")!
		let d = BigInt("2753464581361991590588215946350615255151982765324952516378331537067613521057000501792334289167785492043689452220604111723885845673479644002968509554547070629401648473112528385245549198917442113865555737971218228523290313274350351854589159100053828864568403051563406390910137970258957910661910032768594396524245639009793576629729511229376139064294279317085497742899129413979328408245928354511355847609877651381005968060820234708099282202641194394412550931239900462520400809342789487163467724678504565")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
		XCTAssertEqual((-a) + (-b), -c)
		XCTAssertEqual((-b) + (-a), -c)
		XCTAssertEqual((-a) + b, d)
		XCTAssertEqual(b + (-a), d)
		XCTAssertEqual(a + (-b), -d)
		XCTAssertEqual((-b) + a, -d)
	}
	
	func testAdditionShortLong() {
		let a = BigInt(1)
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525078")!
		let d = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525076")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
		XCTAssertEqual((-a) + (-b), -c)
		XCTAssertEqual((-b) + (-a), -c)
		XCTAssertEqual((-a) + b, d)
		XCTAssertEqual(b + (-a), d)
		XCTAssertEqual(a + (-b), -d)
		XCTAssertEqual((-b) + a, -d)
	}
	
	func testAdditionMediumLong() {
		let a = BigInt("49901941623239827253648045316991932868241148425724")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746239404638842157391076378609089621494433456250950801")!
		let d = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746139600755595677736569082518455637628696973954099353")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
		XCTAssertEqual((-a) + (-b), -c)
		XCTAssertEqual((-b) + (-a), -c)
		XCTAssertEqual((-a) + b, d)
		XCTAssertEqual(b + (-a), d)
		XCTAssertEqual(a + (-b), -d)
		XCTAssertEqual((-b) + a, -d)
	}
	
	func testAdditionFinalOverflow() {
		let a = BigInt(BigInt.Words.Element.max)
		XCTAssertEqual(a.words, [.max, 0]) // First word is all `1` so sign extend
		XCTAssertEqual((-a - 1).words, [0, .max]) // First word is all `0` so sign extend
		XCTAssertEqual((a + 1).words, [0, 1]) // No sign extension
	}
	
	func testSubtractionShort() {
		let a = Int.random(in: (.max / 3)...(.max / 2))
		let b = Int.random(in: (.max / 100)...(.max / 4))
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		XCTAssertEqual(bigA - bigB, BigInt(a - b))
		XCTAssertEqual((-bigA) - bigB, BigInt(-Int(a) - Int(b)))
		XCTAssertEqual(bigA - (-bigB), BigInt(a + b))
	}
	
	func testSubtractionMedium() {
		let a = BigInt("105470362618605957892183821371429397654761503757447")!
		let b = BigInt("55568420995366130638535776054437464786520355331723")!
		let c = BigInt("49901941623239827253648045316991932868241148425724")!
		let d = BigInt("-161038783613972088530719597425866862441281859089170")!
		let e = BigInt("-155372304241845785145831866688421330523002652183171")!
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
		XCTAssertEqual((-a) - (-b), -c)
		XCTAssertEqual((-a) - (-c), -b)
		XCTAssertEqual((-a) - b, d)
		XCTAssertEqual((-a) - c, e)
		XCTAssertEqual(a - (-b), -d)
		XCTAssertEqual(a - (-c), -e)
	}
	
	func testSubtractionLong() {
		let a = BigInt("32451924656158251351573521185723935368726485261226729457943198486500683831259376369727147923324271347135131719074176353002181850279070644354050800578492350916835177207151078652887156188504161196705387562861256623990251231251600422883552137331799777727895626050736980841572280117630278431051857229922192616656023151575347824262126859139952275857661597315316871248104665866630479865052991587927303928952081663506189201445617289611224195481571677363079828074154537372607244651784755771959662705526545589")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		let d = BigInt("-50054619274918372822654389751761210680665719274502570445103963498284832507417564805486889029570299766724542304721566585365215698255345788532560455645012061689953590047282882171953508882214962851990859213277494050247022003514575810252622785547726581024127640601887174457813489161574896601908740861267586123246157546867918524708055044324616483318639535631518055743606563506935384001702451559146633817233061320949786786198836051770885934323678113241826017576851756290171067382348528401521227920629070666")!
		let e = BigInt("-47301154693556381232066173805410595425513736509177617928725631961217218986360564303694554740402514274680852852500962473641329852581866144529591946090464991060551941574170353786707959683297520738125303475306275821723731690240225458398033626447672752159559237550323768066903351191315938691246830828498991726721911907858124948078325533095240344254345256314432558000707434092956055593456523204635277969623183669568780818138015817062786652121036918847413466645611855827650666573005738914357760195950566101")!
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
		XCTAssertEqual((-a) - (-b), -c)
		XCTAssertEqual((-a) - (-c), -b)
		XCTAssertEqual((-a) - b, d)
		XCTAssertEqual((-a) - c, e)
		XCTAssertEqual(a - (-b), -d)
		XCTAssertEqual(a - (-c), -e)
	}
	
	func testSubtractionShortLong() {
		let a = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525078")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt(1)
		let d = BigInt("-35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492379005394437835127645461127545259123130430205050155")!
		let e = BigInt("-17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525079")!
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
		XCTAssertEqual((-a) - (-b), -c)
		XCTAssertEqual((-a) - (-c), -b)
		XCTAssertEqual((-a) - b, d)
		XCTAssertEqual((-a) - c, e)
		XCTAssertEqual(a - (-b), -d)
		XCTAssertEqual(a - (-c), -e)
	}
	
	func testSubtractionMediumLong() {
		let a = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746239404638842157391076378609089621494433456250950801")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("49901941623239827253648045316991932868241148425724")!
		let d = BigInt("-35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492428907336061074954899109172862251055998671353475878")!
		let e = BigInt("-17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746289306580465397218330026654406613427301697399376525")!
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
		XCTAssertEqual((-a) - (-b), -c)
		XCTAssertEqual((-a) - (-c), -b)
		XCTAssertEqual((-a) - b, d)
		XCTAssertEqual((-a) - c, e)
		XCTAssertEqual(a - (-b), -d)
		XCTAssertEqual(a - (-c), -e)
	}
	
	func testMultiplicationShort() {
		let a = BigInt.Words.Element.random(in: (2)...(.max >> (BigInt.Words.Element.bitWidth / 2)))
		let b = BigInt.Words.Element.random(in: (2)...(.max >> (BigInt.Words.Element.bitWidth / 2)))
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		XCTAssertEqual(bigA * bigB, BigInt(a * b))
		XCTAssertEqual(bigB * bigA, BigInt(a * b))
		XCTAssertEqual((-bigA) * (-bigB), BigInt(a * b))
		XCTAssertEqual((-bigB) * (-bigA), BigInt(a * b))
		XCTAssertEqual((-bigA) * bigB, -BigInt(a * b))
		XCTAssertEqual(bigB * (-bigA), -BigInt(a * b))
		XCTAssertEqual(bigA * (-bigB), -BigInt(a * b))
		XCTAssertEqual((-bigB) * bigA, -BigInt(a * b))
	}
	
	func testMultiplicationMedium() {
		let a = BigInt("49901941623239827253648045316991932868241148425724")!
		let b = BigInt("55568420995366130638535776054437464786520355331723")!
		let c = BigInt("2772972100606375026432481050704502030881328221392742989488795590914620070921718156195690091246442452")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
		XCTAssertEqual((-a) * (-b), c)
		XCTAssertEqual((-b) * (-a), c)
		XCTAssertEqual((-a) * b, -c)
		XCTAssertEqual(b * (-a), -c)
		XCTAssertEqual(a * (-b), -c)
		XCTAssertEqual((-b) * a, -c)
	}
	
	func testMultiplicationLong() {
		let a = BigInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("261386461672039218151058286894393123958191400549846528871778363843315792254205848178328663600057484577788021644284478297159245242415834634666815453241438980054726589141048352599718315506610211093412417357031580584769742198095820858427784082694587775484320530715399931953772569195325286164873077558713694101477950488250779695724671373147476157877575841101337949278291142475980554751501704480035393706158572255779081603902435752244706802032205301309626222378719307852751310986115274966510641120122013955584710551147320966956473087947968920544381066312238625521210382345791701169827412260148295462853065608646494900214104410988200391604364765920597610431003543113509716394486994874024289425698628263293081326563610225131535116700998462114022057192233224662595476968161301343566378769787224817186902224233686303243103584033505303605524164038625876024722880064335810467076654970984381288215907834438854327424674584273679540749833382197524156802067909893535748516924725115322592291158477844919545642379424")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
		XCTAssertEqual((-a) * (-b), c)
		XCTAssertEqual((-b) * (-a), c)
		XCTAssertEqual((-a) * b, -c)
		XCTAssertEqual(b * (-a), -c)
		XCTAssertEqual(a * (-b), -c)
		XCTAssertEqual((-b) * a, -c)
	}
	
	func testMultiplicationShortLong() {
		let a = BigInt(2)
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492379005394437835127645461127545259123130430205050154")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
		XCTAssertEqual((-a) * (-b), c)
		XCTAssertEqual((-b) * (-a), c)
		XCTAssertEqual((-a) * b, -c)
		XCTAssertEqual(b * (-a), -c)
		XCTAssertEqual(a * (-b), -c)
		XCTAssertEqual((-b) * a, -c)
	}
	
	func testMultiplicationMediumLong() {
		let a = BigInt("49901941623239827253648045316991932868241148425724")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("878408639277085428197488851907010070516302281809578176147342522430692284735332078474884526001548368410662592775780465415374574781683276509457207987095304493207310808160483433453460318372935645335685727750186050981474456779290980734005465332346532328880558679061770762293904793060292201968673766548830082273084559238738889873226426277599657414727726597350543666593668026877227251936517398162761708151536691832832230659424328697941136077485379775997503391115405210582146300201717304396120465877276311072117569570968013071913125221629864187575781880748")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
		XCTAssertEqual((-a) * (-b), c)
		XCTAssertEqual((-b) * (-a), c)
		XCTAssertEqual((-a) * b, -c)
		XCTAssertEqual(b * (-a), -c)
		XCTAssertEqual(a * (-b), -c)
		XCTAssertEqual((-b) * a, -c)
	}
	
	func testMultiplicationZeroWords() {
		let a = BigInt(BigInt.Words.Element.max) + 1
		let b = a.exponentiating(by: 4)
		XCTAssertEqual(b.words, [0, 0, 0, 0, 1])
		XCTAssertEqual((b * 5).words, [0, 0, 0, 0, 5])
		XCTAssertEqual((5 * b).words, [0, 0, 0, 0, 5])
	}
	
	private static func AssertDivision(_ lhs: BigInt, _ rhs: BigInt, _ quotient: BigInt, _ message: @autoclosure () -> String = "", file: StaticString = #file, line: UInt = #line) {
		XCTAssertEqual(lhs / rhs, quotient)
		let qr = lhs.quotientAndRemainder(dividingBy: rhs)
		XCTAssertNotEqual(qr.remainder, 0, message(), file: file, line: line)
		XCTAssertEqual(qr.quotient, quotient, message(), file: file, line: line)
		XCTAssertEqual((lhs - qr.remainder).quotientAndRemainder(dividingBy: quotient).quotient, rhs, message(), file: file, line: line)
	}
	
	func testDivisionShort() {
		var a = BigInt.Words.Element.random(in: (.max / 2)...(.max))
		let b = BigInt.Words.Element.random(in: (2)...(.max / 4))
		if a % b == 0 { a -= 1 }
		let c = a / b
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		let bigC = BigInt(c)
		BigIntTests.AssertDivision(bigA, bigB, bigC)
		BigIntTests.AssertDivision(-bigA, bigB, -bigC)
		BigIntTests.AssertDivision(bigA, -bigB, -bigC)
		BigIntTests.AssertDivision(-bigA, -bigB, bigC)
	}
	
	func testDivisionMedium() {
		let a = BigInt("2772972100606375026432481050704502030881328221392742989488795590914620070921718156195690091246442492")!
		let b = BigInt("55568420995366130638535776054437464786520355331723")!
		let c = BigInt("49901941623239827253648045316991932868241148425724")!
		BigIntTests.AssertDivision(a, b, c)
		BigIntTests.AssertDivision(-a, b, -c)
		BigIntTests.AssertDivision(a, -b, -c)
		BigIntTests.AssertDivision(-a, -b, c)
	}
	
	func testDivisionLong() {
		let a = BigInt("261386461672039218151058286894393123958191400549846528871778363843315792254205848178328663600057484577788021644284478297159245242415834634666815453241438980054726589141048352599718315506610211093412417357031580584769742198095820858427784082694587775484320530715399931953772569195325286164873077558713694101477950488250779695724671373147476157877575841101337949278291142475980554751501704480035393706158572255779081603902435752244706802032205301309626222378719307852751310986115274966510641120122013955584710551147320966956473087947968920544381066312238625521210382345791701169827412260148295462853065608646494900214104410988200391604364765920597610431003543113509716394486994874024289425698628263293081326563610225131535116700998462114022057192233224662595476968161301343566378769787224817186902224233686303243103584033505303605524164038625876024722880064335810467076654970984381288215907834438854327424674584273679540749833382197524156802067909893535748516924725115322592291158477844919545642379464")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		BigIntTests.AssertDivision(a, b, c)
		BigIntTests.AssertDivision(-a, b, -c)
		BigIntTests.AssertDivision(a, -b, -c)
		BigIntTests.AssertDivision(-a, -b, c)
	}
	
	func testDivisionShortLong() {
		let a = BigInt("35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492379005394437835127645461127545259123130430205050184")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt(2)
		BigIntTests.AssertDivision(a, b, c)
		BigIntTests.AssertDivision(-a, b, -c)
		BigIntTests.AssertDivision(a, -b, -c)
		BigIntTests.AssertDivision(-a, -b, c)
	}
	
	func testDivisionMediumLong() {
		let a = BigInt("878408639277085428197488851907010070516302281809578176147342522430692284735332078474884526001548368410662592775780465415374574781683276509457207987095304493207310808160483433453460318372935645335685727750186050981474456779290980734005465332346532328880558679061770762293904793060292201968673766548830082273084559238738889873226426277599657414727726597350543666593668026877227251936517398162761708151536691832832230659424328697941136077485379775997503391115405210582146300201717304396120465877276311072117569570968013071913125221629864187575781880788")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigInt("49901941623239827253648045316991932868241148425724")!
		BigIntTests.AssertDivision(a, b, c)
		BigIntTests.AssertDivision(-a, b, -c)
		BigIntTests.AssertDivision(a, -b, -c)
		BigIntTests.AssertDivision(-a, -b, c)
	}
	
	private static func AssertRemainder(_ lhs: BigInt, _ rhs: BigInt, _ remainder: BigInt, _ message: @autoclosure () -> String = "", file: StaticString = #file, line: UInt = #line) {
		XCTAssertEqual(lhs.quotientAndRemainder(dividingBy: rhs).remainder, remainder, message(), file: file, line: line)
	}
	
	func testRemainderShort() {
		let a = BigInt.Words.Element.random(in: (1000)...(.max >> (BigInt.Words.Element.bitWidth / 2))) - 10
		let b = BigInt.Words.Element.random(in: (1000)...(.max >> (BigInt.Words.Element.bitWidth / 2))) - 10
		let r = BigInt.Words.Element.random(in: 1..<100)
		let c = a * b + r
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		let bigC = BigInt(c)
		let bigR = BigInt(r)
		BigIntTests.AssertRemainder(bigC, bigA, bigR)
		BigIntTests.AssertRemainder(bigC, bigB, bigR)
		BigIntTests.AssertRemainder(bigC, -bigA, bigR)
		BigIntTests.AssertRemainder(bigC, -bigB, bigR)
		BigIntTests.AssertRemainder(-bigC, bigA, -bigR)
		BigIntTests.AssertRemainder(-bigC, bigB, -bigR)
		BigIntTests.AssertRemainder(-bigC, -bigA, -bigR)
		BigIntTests.AssertRemainder(-bigC, -bigB, -bigR)
	}
	
	func testRemainderMedium() {
		let a = BigInt("49901941623239827253648045316991932868241148425724")!
		let b = BigInt("55568420995366130638535776054437464786520355331723")!
		let r = a / 2
		let c = BigInt("2772972100606375026432481050704502030881328221392742989488795590914620070921718156195690091246442452")! + r
		BigIntTests.AssertRemainder(c, a, r)
		BigIntTests.AssertRemainder(c, b, r)
		BigIntTests.AssertRemainder(c, -a, r)
		BigIntTests.AssertRemainder(c, -b, r)
		BigIntTests.AssertRemainder(-c, a, -r)
		BigIntTests.AssertRemainder(-c, b, -r)
		BigIntTests.AssertRemainder(-c, -a, -r)
		BigIntTests.AssertRemainder(-c, -b, -r)
	}
	
	func testRemainderLong() {
		let a = BigInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let r = a / 2
		let c = BigInt("261386461672039218151058286894393123958191400549846528871778363843315792254205848178328663600057484577788021644284478297159245242415834634666815453241438980054726589141048352599718315506610211093412417357031580584769742198095820858427784082694587775484320530715399931953772569195325286164873077558713694101477950488250779695724671373147476157877575841101337949278291142475980554751501704480035393706158572255779081603902435752244706802032205301309626222378719307852751310986115274966510641120122013955584710551147320966956473087947968920544381066312238625521210382345791701169827412260148295462853065608646494900214104410988200391604364765920597610431003543113509716394486994874024289425698628263293081326563610225131535116700998462114022057192233224662595476968161301343566378769787224817186902224233686303243103584033505303605524164038625876024722880064335810467076654970984381288215907834438854327424674584273679540749833382197524156802067909893535748516924725115322592291158477844919545642379424")! + r
		BigIntTests.AssertRemainder(c, a, r)
		BigIntTests.AssertRemainder(c, b, r)
		BigIntTests.AssertRemainder(c, -a, r)
		BigIntTests.AssertRemainder(c, -b, r)
		BigIntTests.AssertRemainder(-c, a, -r)
		BigIntTests.AssertRemainder(-c, b, -r)
		BigIntTests.AssertRemainder(-c, -a, -r)
		BigIntTests.AssertRemainder(-c, -b, -r)
	}
	
	func testRemainderShortLong() {
		let a = BigInt(2)
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let r = a / 2
		let c = BigInt("35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492379005394437835127645461127545259123130430205050154")! + r
		BigIntTests.AssertRemainder(c, a, r)
		BigIntTests.AssertRemainder(c, b, r)
		BigIntTests.AssertRemainder(c, -a, r)
		BigIntTests.AssertRemainder(c, -b, r)
		BigIntTests.AssertRemainder(-c, a, -r)
		BigIntTests.AssertRemainder(-c, b, -r)
		BigIntTests.AssertRemainder(-c, -a, -r)
		BigIntTests.AssertRemainder(-c, -b, -r)
	}
	
	func testRemainderMediumLong() {
		let a = BigInt("49901941623239827253648045316991932868241148425724")!
		let b = BigInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let r = a / 2
		let c = BigInt("878408639277085428197488851907010070516302281809578176147342522430692284735332078474884526001548368410662592775780465415374574781683276509457207987095304493207310808160483433453460318372935645335685727750186050981474456779290980734005465332346532328880558679061770762293904793060292201968673766548830082273084559238738889873226426277599657414727726597350543666593668026877227251936517398162761708151536691832832230659424328697941136077485379775997503391115405210582146300201717304396120465877276311072117569570968013071913125221629864187575781880748")! + r
		BigIntTests.AssertRemainder(c, a, r)
		BigIntTests.AssertRemainder(c, b, r)
		BigIntTests.AssertRemainder(c, -a, r)
		BigIntTests.AssertRemainder(c, -b, r)
		BigIntTests.AssertRemainder(-c, a, -r)
		BigIntTests.AssertRemainder(-c, b, -r)
		BigIntTests.AssertRemainder(-c, -a, -r)
		BigIntTests.AssertRemainder(-c, -b, -r)
	}
	
	func testExponentiationShort() {
		let a: BigInt = 3
		let b: BigInt = 12
		let c = BigInt("531441")!
		XCTAssertEqual(a.exponentiating(by: b), c)
		XCTAssertEqual((-a).exponentiating(by: b), c)
		XCTAssertEqual(a.exponentiating(by: -b), 0)
		XCTAssertEqual((-a).exponentiating(by: -b), 0)
	}
	
	func testExponentiationMedium() {
		let a: BigInt = 7
		let b: BigInt = 127
		let c = BigInt("212545092456801670844330383105896224333193816736399849985499757869483902203328714236393937418376186556719543")!
		XCTAssertEqual(a.exponentiating(by: b), c)
		XCTAssertEqual((-a).exponentiating(by: b), -c)
		XCTAssertEqual(a.exponentiating(by: -b), 0)
		XCTAssertEqual((-a).exponentiating(by: -b), 0)
	}
	
	func testExponentiationLong() {
		let a: BigInt = 169
		let b: BigInt = 700
		let c = BigInt("331660101699026687341163467476699677453793772305294900703483734001368675112394472424017931441795311855425619362260311423070491268519355923236936494083342364841469655262137680003770891970518072176582600532337157463800307205467141370157077108263253682399848212416668522122476263086448180344060927479685532911096620034750857407452209762591163016231351886109034360839042647940798343542253227800847889166593440830271260735486930210505151669764117001166348710269905626447458691397554510251810323274364971603132405681005134262874958385316686584879653756822167570143911606081035541451857647841635584290505573359747745804718004495087061725984987585570840799950995573074644638108858694357777377713376281517886986240283622717654973077841322423271070901037238029669623994047985770011041325756495785483320601809981607910834581947762041313080175157290255145720551770335082045884034415305743832693233236162143292199035941442880053349375823603585352307865061946899017771867238842105207287226586630999932799569142205002946285070742483446789606810966454848354281108674313359942130369353301355952328306393053573857902522271715476729270770576380994049911758358844260740483547581238956513515893927755841186002127116066891731798669292656376175327938852815897419136936931312066172909585126237608963015541776248092484846062185341001092737956978596564920711617198902998488386771013262805383784767293186511789152227385670727498848580924151462184751906662291955997176089894402795585368169985362557549110027155538652678477496713545801447364260616509957885040372376829331426344842478316001")!
		XCTAssertEqual(a.exponentiating(by: b), c)
		XCTAssertEqual((-a).exponentiating(by: b), c)
		XCTAssertEqual(a.exponentiating(by: -b), 0)
		XCTAssertEqual((-a).exponentiating(by: -b), 0)
	}
	
	func testExponentiationShortLong() {
		let a = BigInt("56881456386119721485114917628475893964258115539508")!
		let b: BigInt = 6
		let c = BigInt("33870705670338441456478804964933446415149541099804251830213974763644246475312698329487578836487413482681032104192697852531378330668934528821923022171929722459329571280789605307420134067814908157298471130261790899149352275909945456472802908759182289197630045022966238919102842505542917319641750278144")!
		XCTAssertEqual(a.exponentiating(by: b), c)
		XCTAssertEqual((-a).exponentiating(by: b), c)
		XCTAssertEqual(a.exponentiating(by: -b), 0)
		XCTAssertEqual((-a).exponentiating(by: -b), 0)
	}
	
	func testExponentiationMediumLong() {
		let a = BigInt("57095038888842856961944648150704451887743297900669")!
		let b: BigInt = 15
		let c = BigInt("223344671942842598915918027351019561398285380733852310067213990630382089918300794001164834383975979392380993410788568926346141674959180327092741593659997670095536533958559742778660775656562425576122529994616890360782196724960545606466401792637447663506627310061824591886731315322847025151630799567758019599613158276816154210262459442885703177844841284576687839192102560427013343930391280963218018500448952295295704308498358535102964040037027690793139953499405558346683340804176912713206278554659431331636675106167065680203582764196264385814693270993327767958615445382271610341116343134146469741762667863265715143679231950677901313421671532160029777683033993787494012219556170128738816186783865273917715459090737710437058391982962658674610423990549")!
		XCTAssertEqual(a.exponentiating(by: b), c)
		XCTAssertEqual((-a).exponentiating(by: b), -c)
		XCTAssertEqual(a.exponentiating(by: -b), 0)
		XCTAssertEqual((-a).exponentiating(by: -b), 0)
	}
	
	func testNegationShort() {
		let a = BigInt(Int(0))
		let b = BigInt(~Int(0))
		XCTAssertEqual(~a, b)
		
		let c = Int.random(in: (.min + 1) ..< .max)
		let d = BigInt(c)
		let e = BigInt(~c)
		XCTAssertEqual(~d, e)
	}
	
	func testNegationMedium() {
		let string1 = BigIntTests.genString(0..<10, 50)
		let number1 = BigInt(string1)!
		let negated1 = ~number1
		let words1 = zip(number1.words, negated1.words)
		for word in words1 {
			XCTAssertEqual(~word.0, word.1)
		}
		
		let string2 = BigIntTests.genString2(0..<10, 50)
		let number2 = BigInt(string2)!
		let negated2 = ~number2
		let words2 = zip(number2.words, negated2.words)
		for word in words2 {
			XCTAssertEqual(~word.0, word.1)
		}
	}
	
	func testNegationLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		let number1 = BigInt(string1)!
		let negated1 = ~number1
		let words1 = zip(number1.words, negated1.words)
		for word in words1 {
			XCTAssertEqual(~word.0, word.1)
		}
		
		let string2 = BigIntTests.genString2(0..<10, 5000)
		let number2 = BigInt(string2)!
		let negated2 = ~number2
		let words2 = zip(number2.words, negated2.words)
		for word in words2 {
			XCTAssertEqual(~word.0, word.1)
		}
	}
	
	private static func SignExtend(_ value: BigInt, to count: Int) -> BigInt.Words {
		let words = value.words
		if words.count >= count { return words }
		let value: UInt = value >= 0 ? .min : .max
		return words + [UInt](repeating: value, count: count - words.count)
	}
	
	private static func AssertAnd(_ lhs: BigInt, _ rhs: BigInt, _ and: BigInt, _ message: @autoclosure () -> String = "", file: StaticString = #file, line: UInt = #line) {
		let maxCount = Swift.max(lhs.words.count, rhs.words.count, and.words.count)
		let words1 = zip(BigIntTests.SignExtend(lhs, to: maxCount), BigIntTests.SignExtend(rhs, to: maxCount))
		let words2 = zip(BigIntTests.SignExtend(and, to: maxCount), words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 & word.1.1, word.0, message(), file: file, line: line)
		}
		XCTAssertEqual(and < 0, lhs < 0 && rhs < 0, message(), file: file, line: line)
	}
	
	func testAndShort() {
		let a = Int.random(in: 0 ... .max)
		let b = Int.random(in: 0 ... .max)
		let c = a & b
		let d = -a & b
		let e = a & -b
		let f = -a & -b
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		let bigC = BigInt(c)
		let bigD = BigInt(d)
		let bigE = BigInt(e)
		let bigF = BigInt(f)
		XCTAssertEqual(bigA & bigB, bigC)
		XCTAssertEqual(-bigA & bigB, bigD)
		XCTAssertEqual(bigA & -bigB, bigE)
		XCTAssertEqual(-bigA & -bigB, bigF)
		XCTAssertEqual(Swift.min(bigA.words.count, bigB.words.count), bigC.words.count)
		XCTAssertEqual(Swift.min((-bigA).words.count, bigB.words.count), bigD.words.count)
		XCTAssertEqual(Swift.min(bigA.words.count, (-bigB).words.count), bigE.words.count)
		XCTAssertEqual(Swift.min((-bigA).words.count, (-bigB).words.count), bigF.words.count)
	}
	
	func testAndMedium() {
		let string1 = BigIntTests.genString(0..<10, 50)
		let string2 = BigIntTests.genString(0..<10, 50)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertAnd(lhs, rhs, lhs & rhs)
		BigIntTests.AssertAnd(-lhs, rhs, -lhs & rhs)
		BigIntTests.AssertAnd(lhs, -rhs, lhs & -rhs)
		BigIntTests.AssertAnd(-lhs, -rhs, -lhs & -rhs)
	}
	
	func testAndLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		let string2 = BigIntTests.genString(0..<10, 5000)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertAnd(lhs, rhs, lhs & rhs)
		BigIntTests.AssertAnd(-lhs, rhs, -lhs & rhs)
		BigIntTests.AssertAnd(lhs, -rhs, lhs & -rhs)
		BigIntTests.AssertAnd(-lhs, -rhs, -lhs & -rhs)
	}
	
	func testAndShortLong() {
		let string2 = BigIntTests.genString(0..<10, 5000)
		let lhs = BigInt(BigInt.Words.Element.random(in: .min ... .max))
		let rhs = BigInt(string2)!
		BigIntTests.AssertAnd(lhs, rhs, lhs & rhs)
		BigIntTests.AssertAnd(-lhs, rhs, -lhs & rhs)
		BigIntTests.AssertAnd(lhs, -rhs, lhs & -rhs)
		BigIntTests.AssertAnd(-lhs, -rhs, -lhs & -rhs)
	}
	
	func testAndMediumLong() {
		let string1 = BigIntTests.genString(0..<10, 50)
		let string2 = BigIntTests.genString(0..<10, 5000)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertAnd(lhs, rhs, lhs & rhs)
		BigIntTests.AssertAnd(-lhs, rhs, -lhs & rhs)
		BigIntTests.AssertAnd(lhs, -rhs, lhs & -rhs)
		BigIntTests.AssertAnd(-lhs, -rhs, -lhs & -rhs)
	}
	
	private static func AssertOr(_ lhs: BigInt, _ rhs: BigInt, _ or: BigInt, _ message: @autoclosure () -> String = "", file: StaticString = #file, line: UInt = #line) {
		let maxCount = Swift.max(lhs.words.count, rhs.words.count, or.words.count)
		let words1 = zip(BigIntTests.SignExtend(lhs, to: maxCount), BigIntTests.SignExtend(rhs, to: maxCount))
		let words2 = zip(BigIntTests.SignExtend(or, to: maxCount), words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 | word.1.1, word.0, message(), file: file, line: line)
		}
		XCTAssertEqual(or < 0, lhs < 0 || rhs < 0, message(), file: file, line: line)
	}
	
	func testOrShort() {
		let a = Int.random(in: .min ... .max)
		let b = Int.random(in: .min ... .max)
		let c = a | b
		let d = -a | b
		let e = a | -b
		let f = -a | -b
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		let bigC = BigInt(c)
		let bigD = BigInt(d)
		let bigE = BigInt(e)
		let bigF = BigInt(f)
		XCTAssertEqual(bigA | bigB, bigC)
		XCTAssertEqual(-bigA | bigB, bigD)
		XCTAssertEqual(bigA | -bigB, bigE)
		XCTAssertEqual(-bigA | -bigB, bigF)
		XCTAssertEqual(Swift.max(bigA.words.count, bigB.words.count), bigC.words.count)
		XCTAssertEqual(Swift.max((-bigA).words.count, bigB.words.count), bigD.words.count)
		XCTAssertEqual(Swift.max(bigA.words.count, (-bigB).words.count), bigE.words.count)
		XCTAssertEqual(Swift.max((-bigA).words.count, (-bigB).words.count), bigF.words.count)
	}
	
	func testOrMedium() {
		let string1 = BigIntTests.genString(0..<10, 50)
		let string2 = BigIntTests.genString(0..<10, 50)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertOr(lhs, rhs, lhs | rhs)
		BigIntTests.AssertOr(-lhs, rhs, -lhs | rhs)
		BigIntTests.AssertOr(lhs, -rhs, lhs | -rhs)
		BigIntTests.AssertOr(-lhs, -rhs, -lhs | -rhs)
	}
	
	func testOrLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		let string2 = BigIntTests.genString(0..<10, 5000)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertOr(lhs, rhs, lhs | rhs)
		BigIntTests.AssertOr(-lhs, rhs, -lhs | rhs)
		BigIntTests.AssertOr(lhs, -rhs, lhs | -rhs)
		BigIntTests.AssertOr(-lhs, -rhs, -lhs | -rhs)
	}
	
	func testOrShortLong() {
		let string2 = BigIntTests.genString(0..<10, 5000)
		let lhs = BigInt(BigInt.Words.Element.random(in: .min ... .max))
		let rhs = BigInt(string2)!
		BigIntTests.AssertOr(lhs, rhs, lhs | rhs)
		BigIntTests.AssertOr(-lhs, rhs, -lhs | rhs)
		BigIntTests.AssertOr(lhs, -rhs, lhs | -rhs)
		BigIntTests.AssertOr(-lhs, -rhs, -lhs | -rhs)
	}
	
	func testOrMediumLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		let string2 = BigIntTests.genString(0..<10, 50)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertOr(lhs, rhs, lhs | rhs)
		BigIntTests.AssertOr(-lhs, rhs, -lhs | rhs)
		BigIntTests.AssertOr(lhs, -rhs, lhs | -rhs)
		BigIntTests.AssertOr(-lhs, -rhs, -lhs | -rhs)
	}
	
	private static func AssertXor(_ lhs: BigInt, _ rhs: BigInt, _ xor: BigInt, _ message: @autoclosure () -> String = "", file: StaticString = #file, line: UInt = #line) {
		let maxCount = Swift.max(lhs.words.count, rhs.words.count, xor.words.count)
		let words1 = zip(BigIntTests.SignExtend(lhs, to: maxCount), BigIntTests.SignExtend(rhs, to: maxCount))
		let words2 = zip(BigIntTests.SignExtend(xor, to: maxCount), words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 ^ word.1.1, word.0, message(), file: file, line: line)
		}
		XCTAssertEqual(xor < 0, (lhs < 0) != (rhs < 0), message(), file: file, line: line)
	}
	
	func testXorShort() {
		let a = Int.random(in: .min ... .max)
		let b = Int.random(in: .min ... .max)
		let c = a ^ b
		let d = -a ^ b
		let e = a ^ -b
		let f = -a ^ -b
		let bigA = BigInt(a)
		let bigB = BigInt(b)
		let bigC = BigInt(c)
		let bigD = BigInt(d)
		let bigE = BigInt(e)
		let bigF = BigInt(f)
		XCTAssertEqual(bigA ^ bigB, bigC)
		XCTAssertEqual(-bigA ^ bigB, bigD)
		XCTAssertEqual(bigA ^ -bigB, bigE)
		XCTAssertEqual(-bigA ^ -bigB, bigF)
		XCTAssertLessThanOrEqual(Swift.max(bigA.words.count, bigB.words.count), bigC.words.count)
		XCTAssertLessThanOrEqual(Swift.max((-bigA).words.count, bigB.words.count), bigD.words.count)
		XCTAssertLessThanOrEqual(Swift.max(bigA.words.count, (-bigB).words.count), bigE.words.count)
		XCTAssertLessThanOrEqual(Swift.max((-bigA).words.count, (-bigB).words.count), bigF.words.count)
	}
	
	func testXorMedium() {
		let string1 = BigIntTests.genString(0..<10, 50)
		let string2 = BigIntTests.genString(0..<10, 50)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertXor(lhs, rhs, lhs ^ rhs)
		BigIntTests.AssertXor(-lhs, rhs, -lhs ^ rhs)
		BigIntTests.AssertXor(lhs, -rhs, lhs ^ -rhs)
		BigIntTests.AssertXor(-lhs, -rhs, -lhs ^ -rhs)
	}
	
	func testXorLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		let string2 = BigIntTests.genString(0..<10, 5000)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertXor(lhs, rhs, lhs ^ rhs)
		BigIntTests.AssertXor(-lhs, rhs, -lhs ^ rhs)
		BigIntTests.AssertXor(lhs, -rhs, lhs ^ -rhs)
		BigIntTests.AssertXor(-lhs, -rhs, -lhs ^ -rhs)
	}
	
	func testXorShortLong() {
		let string2 = BigIntTests.genString(0..<10, 5000)
		let lhs = BigInt(BigInt.Words.Element.random(in: .min ... .max))
		let rhs = BigInt(string2)!
		BigIntTests.AssertXor(lhs, rhs, lhs ^ rhs)
		BigIntTests.AssertXor(-lhs, rhs, -lhs ^ rhs)
		BigIntTests.AssertXor(lhs, -rhs, lhs ^ -rhs)
		BigIntTests.AssertXor(-lhs, -rhs, -lhs ^ -rhs)
	}
	
	func testXorMediumLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		let string2 = BigIntTests.genString(0..<10, 50)
		let lhs = BigInt(string1)!
		let rhs = BigInt(string2)!
		BigIntTests.AssertXor(lhs, rhs, lhs ^ rhs)
		BigIntTests.AssertXor(-lhs, rhs, -lhs ^ rhs)
		BigIntTests.AssertXor(lhs, -rhs, lhs ^ -rhs)
		BigIntTests.AssertXor(-lhs, -rhs, -lhs ^ -rhs)
	}

	func testTrailingBitCountShort() {
		let a = BigInt.Words.Element.random(in: 0 ... .max)
		let bigA = BigInt(a)
		XCTAssertEqual(bigA.trailingZeroBitCount, a.trailingZeroBitCount)
		
		let b = Int.random(in: 1 ... .max)
		let bigB = BigInt(b)
		XCTAssertEqual(bigB.trailingZeroBitCount, b.trailingZeroBitCount)
		XCTAssertEqual((-bigB).trailingZeroBitCount, (-b).trailingZeroBitCount)
		
		XCTAssertEqual(BigInt(0).trailingZeroBitCount, BigInt.Words.Element(0).trailingZeroBitCount)
	}
	
	func testTrailingBitCountMedium() {
		let count = Int.random(in: 100..<500)
		let string = "1" + String(repeating: "0", count: count)
		let number1 = BigInt(string, radix: 2)!
		let number2 = BigInt("-" + string, radix: 2)!
		XCTAssertEqual(number1.trailingZeroBitCount, count)
		XCTAssertEqual(number2.trailingZeroBitCount, count)
	}
	
	func testTrailingBitCountLong() {
		let count = Int.random(in: 1000..<10000)
		let string = "1" + String(repeating: "0", count: count)
		let number1 = BigInt(string, radix: 2)!
		let number2 = BigInt("-" + string, radix: 2)!
		XCTAssertEqual(number1.trailingZeroBitCount, count)
		XCTAssertEqual(number2.trailingZeroBitCount, count)
	}
	
	func testLeftShiftShort() {
		let a = Int.random(in: 0 ... .max)
		let bigA = BigInt(a)
		let b = Int.random(in: 1..<BigInt.Words.Element.bitWidth)
		let number1 = bigA << b
		let number2 = -bigA << b
		XCTAssertEqual(number1 << 0, number1)
		XCTAssertEqual(number2 << 0, number2)
		XCTAssertEqual(number1.trailingZeroBitCount, bigA.trailingZeroBitCount + b)
		XCTAssertEqual(number2.trailingZeroBitCount, (-bigA).trailingZeroBitCount + b)
	}
	
	func testLeftShiftMedium() {
		let string1 = BigIntTests.genString(0..<10, 50)
		let number1 = BigInt(string1)!
		let b1 = Int.random(in: 1..<10) * BigInt.Words.Element.bitWidth
		let shifted1 = number1 << b1
		XCTAssertEqual(shifted1.trailingZeroBitCount, number1.trailingZeroBitCount + b1)
		
		let string2 = BigIntTests.genString2(0..<10, 50)
		let number2 = BigInt(string2)!
		let b2 = Int.random(in: 1..<10) * BigInt.Words.Element.bitWidth
		let shifted2 = number2 << b2
		XCTAssertEqual(shifted2.trailingZeroBitCount, number2.trailingZeroBitCount + b2)
	}
	
	func testLeftShiftLong() {
		let string1 = BigIntTests.genString(0..<10, 5000)
		let number1 = BigInt(string1)!
		let b1 = Int.random(in: 1..<10) * BigInt.Words.Element.bitWidth + Int.random(in: 1..<BigInt.Words.Element.bitWidth)
		let shifted1 = number1 << b1
		XCTAssertEqual(shifted1.trailingZeroBitCount, number1.trailingZeroBitCount + b1)
		
		let string2 = BigIntTests.genString2(0..<10, 5000)
		let number2 = BigInt(string2)!
		let b2 = Int.random(in: 1..<10) * BigInt.Words.Element.bitWidth + Int.random(in: 1..<BigInt.Words.Element.bitWidth)
		let shifted2 = number2 << b2
		XCTAssertEqual(shifted2.trailingZeroBitCount, number2.trailingZeroBitCount + b2)
	}
	
	func testRightShiftShort() {
		let shift1 = BigInt.Words.Element.bitWidth - 1
		let a1 = BigInt.Words.Element(1) << shift1
		let bigA1 = BigInt(a1)
		let b1 = Int.random(in: 1..<BigInt.Words.Element.bitWidth)
		let number1 = bigA1 >> b1
		XCTAssertEqual(number1 >> 0, number1)
		XCTAssertEqual(number1.trailingZeroBitCount, shift1 - b1)
		
		let shift2 = BigInt.Words.Element.bitWidth - 1
		let a2 = Int(-1) << shift2
		let bigA2 = BigInt(a2)
		let b2 = Int.random(in: 1..<BigInt.Words.Element.bitWidth)
		let number2 = bigA2 >> b2
		XCTAssertEqual(number2 >> 0, number2)
		XCTAssertEqual(number2.trailingZeroBitCount, shift2 - b2)
	}
	
	func testRightShiftMedium() {
		let string = BigIntTests.genString(0..<10, 50)
		let number = BigInt(string)!
		let shift = 10 * BigInt.Words.Element.bitWidth
		let b = Int.random(in: 1..<10) * BigInt.Words.Element.bitWidth
		let shifted1 = (number << shift) >> b
		let shifted2 = (-number << shift) >> b
		XCTAssertEqual(shifted1.trailingZeroBitCount, number.trailingZeroBitCount + shift - b)
		XCTAssertEqual(shifted2.trailingZeroBitCount, (-number).trailingZeroBitCount + shift - b)
	}
	
	func testRightShiftLong() {
		let string = BigIntTests.genString(0..<10, 5000)
		let number = BigInt(string)!
		let shift = 11 * BigInt.Words.Element.bitWidth - 1
		let b = Int.random(in: 1..<10) * BigInt.Words.Element.bitWidth + Int.random(in: 1..<BigInt.Words.Element.bitWidth)
		let shifted1 = (number << shift) >> b
		let shifted2 = (-number << shift) >> b
		XCTAssertEqual(shifted1.trailingZeroBitCount, number.trailingZeroBitCount + shift - b)
		XCTAssertEqual(shifted2.trailingZeroBitCount, (-number).trailingZeroBitCount + shift - b)
	}
	
	func test2sComplementShort() {
		let a = BigInt(UInt.min)
		XCTAssertEqual(a.words, [UInt.min])
		
		let b = BigInt(UInt.max)
		XCTAssertEqual(b.words, [UInt.max, 0])
		XCTAssertEqual((-b).words, [1, UInt.max])
		
		let c = BigInt(Int.min)
		XCTAssertEqual(c.words, Array(Int.min.words))
		
		let d = BigInt(Int.max)
		XCTAssertEqual(d.words, Array(Int.max.words))
	}
	
	func test2sComplementMedium() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		
		let string1 = "1" + BigIntTests.genString(digits, (16 * 5) - 2)
		let a = BigInt(string1, radix: 16)!
		XCTAssertEqual(a.words, a.magnitude.words)
		let aMagWords = (~(a.magnitude) + 1).words
		XCTAssertEqual((-a).words, aMagWords)
		
		let string2 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" + BigIntTests.genString(digits, (16 * 5) - 1)
		let b = BigInt(string2, radix: 16)!
		XCTAssertEqual(b.words, b.magnitude.words + [0])
		let bMagWords = (~(b.magnitude) + 1).words
		XCTAssertEqual((-b).words, bMagWords + [UInt](repeating: 0, count: (-b).words.count - bMagWords.count - 1) + [.max])
	}
	
	func test2sComplementLong() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		
		let string1 = "1" + BigIntTests.genString(digits, (16 * 50) - 2)
		let a = BigInt(string1, radix: 16)!
		XCTAssertEqual(a.words, a.magnitude.words)
		let aMagWords = (~(a.magnitude) + 1).words
		XCTAssertEqual((-a).words, aMagWords)
		
		let string2 = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" + BigIntTests.genString(digits, (16 * 50) - 1)
		let b = BigInt(string2, radix: 16)!
		XCTAssertEqual(b.words, b.magnitude.words + [0])
		let bMagWords = (~(b.magnitude) + 1).words
		XCTAssertEqual((-b).words, bMagWords + [UInt](repeating: 0, count: (-b).words.count - bMagWords.count - 1) + [.max])
	}
	
	func testFactorialPerformance() {
		func recursiveMul(_ n: BigInt, _ k: BigInt) -> BigInt {
			if n >= k - 1 { return k }
			let m = (n + k) >> 1
			return recursiveMul(n, m) * recursiveMul(m, k)
		}
		
		func factorial(_ n: BigInt) -> BigInt {
			return recursiveMul(0, n)
		}
		
		measure {
			_ = factorial(25_000)
		}
	}
}
