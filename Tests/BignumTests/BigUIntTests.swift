//
//  BigUIntTests.swift
//  BignumTests
//

import XCTest
import Bignum

final class BigUIntTests: XCTestCase {
	private static func genString(_ range: Range<Int>, _ count: Int) -> String {
		let digits = (0..<count).map { _ in range.randomElement()! }
		return digits.reduce(into: "1") { $0 += "\($1)" }
	}
	
	private static func AssertStringInit(_ radix: Int, _ count: Int) {
		let string = BigUIntTests.genString(0..<radix, count)
		guard let biguint = BigUInt(string, radix: radix) else {
			XCTFail("BigUInt from /\(radix):\(count): \"\(string)\"")
			return
		}
		XCTAssertEqual(String(biguint, radix: radix), string)
	}
	
	private static func genString(_ range: [Character], _ count: Int) -> String {
		let digits = [1] + (0..<count).map { _ in range.randomElement()! }
		return digits.reduce(into: "1") { $0 += "\($1)" }
	}
	
	private static func AssertStringInit(_ range: [Character], _ count: Int) {
		let string = BigUIntTests.genString(range, count)
		guard let biguint = BigUInt(string, radix: range.count) else {
			XCTFail("BigUInt from /\(range.count):\(count): \"\(string)\"")
			return
		}
		XCTAssertEqual(String(biguint, radix: range.count), string)
	}
	
	func testString2ConversionShort() {
		BigUIntTests.AssertStringInit(2, 5)
	}
	
	func testString2ConversionMedium() {
		BigUIntTests.AssertStringInit(2, 50)
	}
	
	func testString2ConversionLong() {
		BigUIntTests.AssertStringInit(2, 5000)
	}
	
	func testString3ConversionShort() {
		BigUIntTests.AssertStringInit(3, 5)
	}
	
	func testString3ConversionMedium() {
		BigUIntTests.AssertStringInit(3, 50)
	}
	
	func testString3ConversionLong() {
		BigUIntTests.AssertStringInit(3, 5000)
	}
	
	func testString8ConversionShort() {
		BigUIntTests.AssertStringInit(8, 5)
	}
	
	func testString8ConversionMedium() {
		BigUIntTests.AssertStringInit(8, 50)
	}
	
	func testString8ConversionLong() {
		BigUIntTests.AssertStringInit(8, 5000)
	}
	
	func testString10ConversionShort() {
		BigUIntTests.AssertStringInit(10, 5)
	}
	
	func testString10ConversionMedium() {
		BigUIntTests.AssertStringInit(10, 50)
	}
	
	func testString10ConversionLong() {
		BigUIntTests.AssertStringInit(10, 5000)
	}
	
	func testString16ConversionShort() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		BigUIntTests.AssertStringInit(digits, 5)
	}
	
	func testString16ConversionMedium() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		BigUIntTests.AssertStringInit(digits, 50)
	}
	
	func testString16ConversionLong() {
		let digits: [Character] = [
			"0", "1", "2", "3", "4", "5", "6", "7",
			"8", "9", "a", "b", "c", "d", "e", "f",
		]
		BigUIntTests.AssertStringInit(digits, 5000)
	}
	
	func testDescriptionShort() {
		XCTAssertEqual(BigUInt(0).description, "0")
		XCTAssertEqual(BigUInt(1).description, "1")
		
		let value = BigUInt.Words.Element.random(in: .min ... .max)
		XCTAssertEqual(BigUInt(value).description, value.description)
	}
	
	func testDescriptionMedium() {
		let string = BigUIntTests.genString(0..<10, 100)
		guard let biguint = BigUInt(string) else {
			XCTFail("BigUInt from /10:100: \"\(string)\"")
			return
		}
		XCTAssertEqual(biguint.description, string)
	}
	
	func testDescriptionLong() {
		let string = BigUIntTests.genString(0..<10, 5000)
		guard let biguint = BigUInt(string) else {
			XCTFail("BigUInt from /10:100: \"\(string)\"")
			return
		}
		XCTAssertEqual(biguint.description, string)
	}
	
	func testAdditionShort() {
		let a = BigUInt.Words.Element.random(in: (.max / 100)...(.max / 3))
		let b = BigUInt.Words.Element.random(in: (.max / 100)...(.max / 3))
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		XCTAssertEqual(bigA + bigB, BigUInt(a + b))
		XCTAssertEqual(bigB + bigA, BigUInt(a + b))
	}
	
	func testAdditionMedium() {
		let a = BigUInt("49901941623239827253648045316991932868241148425724")!
		let b = BigUInt("55568420995366130638535776054437464786520355331723")!
		let c = BigUInt("105470362618605957892183821371429397654761503757447")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
	}
	
	func testAdditionLong() {
		let a = BigUInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("32451924656158251351573521185723935368726485261226729457943198486500683831259376369727147923324271347135131719074176353002181850279070644354050800578492350916835177207151078652887156188504161196705387562861256623990251231251600422883552137331799777727895626050736980841572280117630278431051857229922192616656023151575347824262126859139952275857661597315316871248104665866630479865052991587927303928952081663506189201445617289611224195481571677363079828074154537372607244651784755771959662705526545589")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
	}
	
	func testAdditionShortLong() {
		let a = BigUInt(1)
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525078")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
	}
	
	func testAdditionMediumLong() {
		let a = BigUInt("49901941623239827253648045316991932868241148425724")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746239404638842157391076378609089621494433456250950801")!
		XCTAssertEqual(a + b, c)
		XCTAssertEqual(b + a, c)
	}
	
	func testAdditionFinalOverflow() {
		let a = BigUInt(BigUInt.Words.Element.max)
		XCTAssertEqual(a.words, [.max])
		XCTAssertEqual((a + 1).words, [0, 1])
	}
	
	func testSubtractionShort() {
		let a = BigUInt.Words.Element.random(in: (.max / 2)...(.max))
		let b = BigUInt.Words.Element.random(in: (.max / 100)...(.max / 3))
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		XCTAssertEqual(bigA - bigB, BigUInt(a - b))
	}
	
	func testSubtractionMedium() {
		let a = BigUInt("105470362618605957892183821371429397654761503757447")!
		let b = BigUInt("55568420995366130638535776054437464786520355331723")!
		let c = BigUInt("49901941623239827253648045316991932868241148425724")!
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
	}
	
	func testSubtractionLong() {
		let a = BigUInt("32451924656158251351573521185723935368726485261226729457943198486500683831259376369727147923324271347135131719074176353002181850279070644354050800578492350916835177207151078652887156188504161196705387562861256623990251231251600422883552137331799777727895626050736980841572280117630278431051857229922192616656023151575347824262126859139952275857661597315316871248104665866630479865052991587927303928952081663506189201445617289611224195481571677363079828074154537372607244651784755771959662705526545589")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
	}
	
	func testSubtractionShortLong() {
		let a = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525078")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt(1)
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
	}
	
	func testSubtractionMediumLong() {
		let a = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746239404638842157391076378609089621494433456250950801")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("49901941623239827253648045316991932868241148425724")!
		XCTAssertEqual(a - b, c)
		XCTAssertEqual(a - c, b)
	}
	
	func testMultiplicationShort() {
		let a = BigUInt.Words.Element.random(in: (2)...(.max >> (BigUInt.Words.Element.bitWidth / 2)))
		let b = BigUInt.Words.Element.random(in: (2)...(.max >> (BigUInt.Words.Element.bitWidth / 2)))
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		XCTAssertEqual(bigA * bigB, BigUInt(a * b))
		XCTAssertEqual(bigB * bigA, BigUInt(a * b))
	}
	
	func testMultiplicationMedium() {
		let a = BigUInt("49901941623239827253648045316991932868241148425724")!
		let b = BigUInt("55568420995366130638535776054437464786520355331723")!
		let c = BigUInt("2772972100606375026432481050704502030881328221392742989488795590914620070921718156195690091246442452")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
	}
	
	func testMultiplicationLong() {
		let a = BigUInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("261386461672039218151058286894393123958191400549846528871778363843315792254205848178328663600057484577788021644284478297159245242415834634666815453241438980054726589141048352599718315506610211093412417357031580584769742198095820858427784082694587775484320530715399931953772569195325286164873077558713694101477950488250779695724671373147476157877575841101337949278291142475980554751501704480035393706158572255779081603902435752244706802032205301309626222378719307852751310986115274966510641120122013955584710551147320966956473087947968920544381066312238625521210382345791701169827412260148295462853065608646494900214104410988200391604364765920597610431003543113509716394486994874024289425698628263293081326563610225131535116700998462114022057192233224662595476968161301343566378769787224817186902224233686303243103584033505303605524164038625876024722880064335810467076654970984381288215907834438854327424674584273679540749833382197524156802067909893535748516924725115322592291158477844919545642379424")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
	}
	
	func testMultiplicationShortLong() {
		let a = BigUInt(2)
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492379005394437835127645461127545259123130430205050154")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
	}
	
	func testMultiplicationMediumLong() {
		let a = BigUInt("49901941623239827253648045316991932868241148425724")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("878408639277085428197488851907010070516302281809578176147342522430692284735332078474884526001548368410662592775780465415374574781683276509457207987095304493207310808160483433453460318372935645335685727750186050981474456779290980734005465332346532328880558679061770762293904793060292201968673766548830082273084559238738889873226426277599657414727726597350543666593668026877227251936517398162761708151536691832832230659424328697941136077485379775997503391115405210582146300201717304396120465877276311072117569570968013071913125221629864187575781880748")!
		XCTAssertEqual(a * b, c)
		XCTAssertEqual(b * a, c)
	}
	
	func testMultiplicationZeroWords() {
		let a = BigUInt(BigUInt.Words.Element.max) + 1
		let b = a.exponentiating(by: 4)
		XCTAssertEqual(b.words, [0, 0, 0, 0, 1])
		XCTAssertEqual((b * 5).words, [0, 0, 0, 0, 5])
		XCTAssertEqual((5 * b).words, [0, 0, 0, 0, 5])
	}
	
	func testDivisionShort() {
		let a = BigUInt.Words.Element.random(in: (.max / 2)...(.max))
		let b = BigUInt.Words.Element.random(in: (2)...(.max / 4))
		let c = a / b
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		let bigC = BigUInt(c)
		XCTAssertEqual(bigA / bigB, bigC)
		let qr = bigA.quotientAndRemainder(dividingBy: bigB)
		XCTAssertEqual(qr.quotient, bigC)
		XCTAssertEqual((bigA - qr.remainder).quotientAndRemainder(dividingBy: bigC).quotient, bigB)
	}
	
	func testDivisionMedium() {
		let a = BigUInt("2772972100606375026432481050704502030881328221392742989488795590914620070921718156195690091246442492")!
		let b = BigUInt("55568420995366130638535776054437464786520355331723")!
		let c = BigUInt("49901941623239827253648045316991932868241148425724")!
		XCTAssertEqual(a / b, c)
		let qr = a.quotientAndRemainder(dividingBy: b)
		XCTAssertNotEqual(qr.remainder, 0)
		XCTAssertEqual(qr.quotient, c)
		XCTAssertEqual((a - qr.remainder).quotientAndRemainder(dividingBy: c).quotient, b)
	}
	
	func testDivisionLong() {
		let a = BigUInt("261386461672039218151058286894393123958191400549846528871778363843315792254205848178328663600057484577788021644284478297159245242415834634666815453241438980054726589141048352599718315506610211093412417357031580584769742198095820858427784082694587775484320530715399931953772569195325286164873077558713694101477950488250779695724671373147476157877575841101337949278291142475980554751501704480035393706158572255779081603902435752244706802032205301309626222378719307852751310986115274966510641120122013955584710551147320966956473087947968920544381066312238625521210382345791701169827412260148295462853065608646494900214104410988200391604364765920597610431003543113509716394486994874024289425698628263293081326563610225131535116700998462114022057192233224662595476968161301343566378769787224817186902224233686303243103584033505303605524164038625876024722880064335810467076654970984381288215907834438854327424674584273679540749833382197524156802067909893535748516924725115322592291158477844919545642379464")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		XCTAssertEqual(a / b, c)
		let qr = a.quotientAndRemainder(dividingBy: b)
		XCTAssertNotEqual(qr.remainder, 0)
		XCTAssertEqual(qr.quotient, c)
		XCTAssertEqual((a - qr.remainder).quotientAndRemainder(dividingBy: c).quotient, b)
	}
	
	func testDivisionShortLong() {
		let a = BigUInt("35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492379005394437835127645461127545259123130430205050184")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt(2)
		XCTAssertEqual(a / b, c)
		let qr = a.quotientAndRemainder(dividingBy: b)
		XCTAssertNotEqual(qr.remainder, 0)
		XCTAssertEqual(qr.quotient, c)
		XCTAssertEqual((a - qr.remainder).quotientAndRemainder(dividingBy: c).quotient, b)
	}
	
	func testDivisionMediumLong() {
		let a = BigUInt("878408639277085428197488851907010070516302281809578176147342522430692284735332078474884526001548368410662592775780465415374574781683276509457207987095304493207310808160483433453460318372935645335685727750186050981474456779290980734005465332346532328880558679061770762293904793060292201968673766548830082273084559238738889873226426277599657414727726597350543666593668026877227251936517398162761708151536691832832230659424328697941136077485379775997503391115405210582146300201717304396120465877276311072117569570968013071913125221629864187575781880788")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let c = BigUInt("49901941623239827253648045316991932868241148425724")!
		XCTAssertEqual(a / b, c)
		let qr = a.quotientAndRemainder(dividingBy: b)
		XCTAssertNotEqual(qr.remainder, 0)
		XCTAssertEqual(qr.quotient, c)
		XCTAssertEqual((a - qr.remainder).quotientAndRemainder(dividingBy: c).quotient, b)
	}
	
	func testRemainderShort() {
		let a = BigUInt.Words.Element.random(in: (1000)...(.max >> (BigUInt.Words.Element.bitWidth / 2))) - 10
		let b = BigUInt.Words.Element.random(in: (1000)...(.max >> (BigUInt.Words.Element.bitWidth / 2))) - 10
		let r = BigUInt.Words.Element.random(in: 1..<100)
		let c = a * b + r
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		let bigC = BigUInt(c)
		let bigR = BigUInt(r)
		XCTAssertEqual(bigC.quotientAndRemainder(dividingBy: bigA).remainder, bigR)
		XCTAssertEqual(bigC.quotientAndRemainder(dividingBy: bigB).remainder, bigR)
	}
	
	func testRemainderMedium() {
		let a = BigUInt("49901941623239827253648045316991932868241148425724")!
		let b = BigUInt("55568420995366130638535776054437464786520355331723")!
		let r = a / 2
		let c = BigUInt("2772972100606375026432481050704502030881328221392742989488795590914620070921718156195690091246442452")! + r
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: a).remainder, r)
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: b).remainder, r)
	}
	
	func testRemainderLong() {
		let a = BigUInt("14849230037398129880492652619686660056787251247950888470782433474716535155101187933967406817078242927545721133426786120639148002302795500175541145511972640143716764367019275133820803494793359541419915912445019197733480458988625035514481489115872974431663611499586787225331071073685660260194973598576799110065888756282777123816198673955288068396683658999115686752602768226325575728403531616707974040671102006062591616692398527451562456639465241484333638571457318455043421921220983142398097490424020512")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let r = a / 2
		let c = BigUInt("261386461672039218151058286894393123958191400549846528871778363843315792254205848178328663600057484577788021644284478297159245242415834634666815453241438980054726589141048352599718315506610211093412417357031580584769742198095820858427784082694587775484320530715399931953772569195325286164873077558713694101477950488250779695724671373147476157877575841101337949278291142475980554751501704480035393706158572255779081603902435752244706802032205301309626222378719307852751310986115274966510641120122013955584710551147320966956473087947968920544381066312238625521210382345791701169827412260148295462853065608646494900214104410988200391604364765920597610431003543113509716394486994874024289425698628263293081326563610225131535116700998462114022057192233224662595476968161301343566378769787224817186902224233686303243103584033505303605524164038625876024722880064335810467076654970984381288215907834438854327424674584273679540749833382197524156802067909893535748516924725115322592291158477844919545642379424")! + r
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: a).remainder, r)
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: b).remainder, r)
	}
	
	func testRemainderShortLong() {
		let a = BigUInt(2)
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let r = a / 2
		let c = BigUInt("35205389237520242942161737132074550623878468026551681974321530023568297352316376871519482212492056839178821171294780464726067695952550288357019310133039421546236825680263607038132705387421603310570943300832474852513541544525950774738141296431853606592464029102300387232482418087889236341713767262690787013180268790585141400891856370369328414921955876632402368991003795280609808273298919942438659776561959314887195169506437524319323477684212871757492379005394437835127645461127545259123130430205050154")! + r
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: a).remainder, r)
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: b).remainder, r)
	}
	
	func testRemainderMediumLong() {
		let a = BigUInt("49901941623239827253648045316991932868241148425724")!
		let b = BigUInt("17602694618760121471080868566037275311939234013275840987160765011784148676158188435759741106246028419589410585647390232363033847976275144178509655066519710773118412840131803519066352693710801655285471650416237426256770772262975387369070648215926803296232014551150193616241209043944618170856883631345393506590134395292570700445928185184664207460977938316201184495501897640304904136649459971219329888280979657443597584753218762159661738842106435878746189502697218917563822730563772629561565215102525077")!
		let r = a / 2
		let c = BigUInt("878408639277085428197488851907010070516302281809578176147342522430692284735332078474884526001548368410662592775780465415374574781683276509457207987095304493207310808160483433453460318372935645335685727750186050981474456779290980734005465332346532328880558679061770762293904793060292201968673766548830082273084559238738889873226426277599657414727726597350543666593668026877227251936517398162761708151536691832832230659424328697941136077485379775997503391115405210582146300201717304396120465877276311072117569570968013071913125221629864187575781880748")! + r
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: a).remainder, r)
		XCTAssertEqual(c.quotientAndRemainder(dividingBy: b).remainder, r)
	}
	
	func testExponentiationShort() {
		let a: BigUInt = 3
		let b: BigUInt = 12
		let c = BigUInt("531441")!
		XCTAssertEqual(a.exponentiating(by: b), c)
	}
	
	func testExponentiationMedium() {
		let a: BigUInt = 7
		let b: BigUInt = 127
		let c = BigUInt("212545092456801670844330383105896224333193816736399849985499757869483902203328714236393937418376186556719543")!
		XCTAssertEqual(a.exponentiating(by: b), c)
	}
	
	func testExponentiationLong() {
		let a: BigUInt = 169
		let b: BigUInt = 700
		let c = BigUInt("331660101699026687341163467476699677453793772305294900703483734001368675112394472424017931441795311855425619362260311423070491268519355923236936494083342364841469655262137680003770891970518072176582600532337157463800307205467141370157077108263253682399848212416668522122476263086448180344060927479685532911096620034750857407452209762591163016231351886109034360839042647940798343542253227800847889166593440830271260735486930210505151669764117001166348710269905626447458691397554510251810323274364971603132405681005134262874958385316686584879653756822167570143911606081035541451857647841635584290505573359747745804718004495087061725984987585570840799950995573074644638108858694357777377713376281517886986240283622717654973077841322423271070901037238029669623994047985770011041325756495785483320601809981607910834581947762041313080175157290255145720551770335082045884034415305743832693233236162143292199035941442880053349375823603585352307865061946899017771867238842105207287226586630999932799569142205002946285070742483446789606810966454848354281108674313359942130369353301355952328306393053573857902522271715476729270770576380994049911758358844260740483547581238956513515893927755841186002127116066891731798669292656376175327938852815897419136936931312066172909585126237608963015541776248092484846062185341001092737956978596564920711617198902998488386771013262805383784767293186511789152227385670727498848580924151462184751906662291955997176089894402795585368169985362557549110027155538652678477496713545801447364260616509957885040372376829331426344842478316001")!
		XCTAssertEqual(a.exponentiating(by: b), c)
	}
	
	func testExponentiationShortLong() {
		let a = BigUInt("56881456386119721485114917628475893964258115539508")!
		let b: BigUInt = 6
		let c = BigUInt("33870705670338441456478804964933446415149541099804251830213974763644246475312698329487578836487413482681032104192697852531378330668934528821923022171929722459329571280789605307420134067814908157298471130261790899149352275909945456472802908759182289197630045022966238919102842505542917319641750278144")!
		XCTAssertEqual(a.exponentiating(by: b), c)
	}
	
	func testExponentiationMediumLong() {
		let a = BigUInt("57095038888842856961944648150704451887743297900669")!
		let b: BigUInt = 15
		let c = BigUInt("223344671942842598915918027351019561398285380733852310067213990630382089918300794001164834383975979392380993410788568926346141674959180327092741593659997670095536533958559742778660775656562425576122529994616890360782196724960545606466401792637447663506627310061824591886731315322847025151630799567758019599613158276816154210262459442885703177844841284576687839192102560427013343930391280963218018500448952295295704308498358535102964040037027690793139953499405558346683340804176912713206278554659431331636675106167065680203582764196264385814693270993327767958615445382271610341116343134146469741762667863265715143679231950677901313421671532160029777683033993787494012219556170128738816186783865273917715459090737710437058391982962658674610423990549")!
		XCTAssertEqual(a.exponentiating(by: b), c)
	}
	
	func testNegationShort() {
		let a = BigUInt(0)
		let b = BigUInt(BigUInt.Words.Element.max)
		XCTAssertEqual(~a, b)
		
		let c = BigUInt.Words.Element.random(in: (.min + 1) ..< .max)
		let d = BigUInt(c)
		let e = BigUInt(~c)
		XCTAssertEqual(~d, e)
		
		let f = BigUInt(BigUInt.Words.Element.max) + BigUInt(BigUInt.Words.Element.max)
		let g = BigUInt(BigUInt.Words.Element.max) * BigUInt(BigUInt.Words.Element.max)
		XCTAssertEqual(~f, g)
	}
	
	func testNegationMedium() {
		let string = BigUIntTests.genString(0..<10, 50)
		let number = BigUInt(string)!
		let negated = ~number
		let words = zip(number.words, negated.words)
		for word in words {
			XCTAssertEqual(~word.0, word.1)
		}
	}
	
	func testNegationLong() {
		let string = BigUIntTests.genString(0..<10, 5000)
		let number = BigUInt(string)!
		let negated = ~number
		let words = zip(number.words, negated.words)
		for word in words {
			XCTAssertEqual(~word.0, word.1)
		}
	}
	
	func testAndShort() {
		let a = BigUInt.Words.Element.random(in: .min ... .max)
		let b = BigUInt.Words.Element.random(in: .min ... .max)
		let c = a & b
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		let bigC = BigUInt(c)
		XCTAssertEqual(bigA & bigB, bigC)
		XCTAssertEqual(Swift.min(bigA.words.count, bigB.words.count), bigC.words.count)
	}
	
	func testAndMedium() {
		let string1 = BigUIntTests.genString(0..<10, 50)
		let string2 = BigUIntTests.genString(0..<10, 50)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let and = number1 & number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(and.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 & word.1.1, word.0)
		}
		XCTAssertEqual(Swift.min(number1.words.count, number2.words.count), and.words.count)
	}
	
	func testAndLong() {
		let string1 = BigUIntTests.genString(0..<10, 5000)
		let string2 = BigUIntTests.genString(0..<10, 5000)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let and = number1 & number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(and.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 & word.1.1, word.0)
		}
		XCTAssertEqual(Swift.min(number1.words.count, number2.words.count), and.words.count)
	}
	
	func testAndShortLong() {
		let string2 = BigUIntTests.genString(0..<10, 5000)
		let number1 = BigUInt(BigUInt.Words.Element.random(in: .min ... .max))
		let number2 = BigUInt(string2)!
		let and = number1 & number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(and.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 & word.1.1, word.0)
		}
		XCTAssertEqual(Swift.min(number1.words.count, number2.words.count), and.words.count)
	}
	
	func testAndMediumLong() {
		let string1 = BigUIntTests.genString(0..<10, 50)
		let string2 = BigUIntTests.genString(0..<10, 5000)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let and = number1 & number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(and.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 & word.1.1, word.0)
		}
		XCTAssertEqual(Swift.min(number1.words.count, number2.words.count), and.words.count)
	}
	
	func testOrShort() {
		let a = BigUInt.Words.Element.random(in: .min ... .max)
		let b = BigUInt.Words.Element.random(in: .min ... .max)
		let c = a | b
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		let bigC = BigUInt(c)
		XCTAssertEqual(bigA | bigB, bigC)
		XCTAssertEqual(Swift.max(bigA.words.count, bigB.words.count), bigC.words.count)
	}
	
	func testOrMedium() {
		let string1 = BigUIntTests.genString(0..<10, 50)
		let string2 = BigUIntTests.genString(0..<10, 50)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let or = number1 | number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(or.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 | word.1.1, word.0)
		}
		XCTAssertEqual(Swift.max(number1.words.count, number2.words.count), or.words.count)
	}
	
	func testOrLong() {
		let string1 = BigUIntTests.genString(0..<10, 5000)
		let string2 = BigUIntTests.genString(0..<10, 5000)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let or = number1 | number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(or.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 | word.1.1, word.0)
		}
		XCTAssertEqual(Swift.max(number1.words.count, number2.words.count), or.words.count)
	}
	
	func testOrShortLong() {
		let string2 = BigUIntTests.genString(0..<10, 5000)
		let number1 = BigUInt(BigUInt.Words.Element.random(in: .min ... .max))
		let number2 = BigUInt(string2)!
		let or = number1 | number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(or.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 | word.1.1, word.0)
		}
		for word in zip(number2.words, or.words).dropFirst(Array(words2).count) {
			XCTAssertEqual(word.0, word.1)
		}
		XCTAssertEqual(Swift.max(number1.words.count, number2.words.count), or.words.count)
	}
	
	func testOrMediumLong() {
		let string1 = BigUIntTests.genString(0..<10, 5000)
		let string2 = BigUIntTests.genString(0..<10, 50)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let or = number1 | number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(or.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 | word.1.1, word.0)
		}
		for word in zip(number1.words, or.words).dropFirst(Array(words2).count) {
			XCTAssertEqual(word.0, word.1)
		}
		XCTAssertEqual(Swift.max(number1.words.count, number2.words.count), or.words.count)
	}
	
	func testXorShort() {
		let a = BigUInt.Words.Element.random(in: .min ... .max)
		let b = BigUInt.Words.Element.random(in: .min ... .max)
		let c = a ^ b
		let bigA = BigUInt(a)
		let bigB = BigUInt(b)
		let bigC = BigUInt(c)
		XCTAssertEqual(bigA ^ bigB, bigC)
		XCTAssertLessThanOrEqual(Swift.max(bigA.words.count, bigB.words.count), bigC.words.count)
	}
	
	func testXorMedium() {
		let string1 = BigUIntTests.genString(0..<10, 50)
		let string2 = BigUIntTests.genString(0..<10, 50)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let xor = number1 ^ number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(xor.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 ^ word.1.1, word.0)
		}
		XCTAssertLessThanOrEqual(Swift.max(number1.words.count, number2.words.count), xor.words.count)
	}
	
	func testXorLong() {
		let string1 = BigUIntTests.genString(0..<10, 5000)
		let string2 = BigUIntTests.genString(0..<10, 5000)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let xor = number1 ^ number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(xor.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 ^ word.1.1, word.0)
		}
		XCTAssertLessThanOrEqual(Swift.max(number1.words.count, number2.words.count), xor.words.count)
	}
	
	func testXorShortLong() {
		let string2 = BigUIntTests.genString(0..<10, 5000)
		let number1 = BigUInt(BigUInt.Words.Element.random(in: .min ... .max))
		let number2 = BigUInt(string2)!
		let xor = number1 ^ number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(xor.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 ^ word.1.1, word.0)
		}
		for word in zip(number2.words, xor.words).dropFirst(Array(words2).count) {
			XCTAssertEqual(word.0, word.1)
		}
		XCTAssertLessThanOrEqual(Swift.max(number1.words.count, number2.words.count), xor.words.count)
	}
	
	func testXorMediumLong() {
		let string1 = BigUIntTests.genString(0..<10, 5000)
		let string2 = BigUIntTests.genString(0..<10, 50)
		let number1 = BigUInt(string1)!
		let number2 = BigUInt(string2)!
		let xor = number1 ^ number2
		let words1 = zip(number1.words, number2.words)
		let words2 = zip(xor.words, words1)
		for word in words2 {
			XCTAssertEqual(word.1.0 ^ word.1.1, word.0)
		}
		for word in zip(number1.words, xor.words).dropFirst(Array(words2).count) {
			XCTAssertEqual(word.0, word.1)
		}
		XCTAssertLessThanOrEqual(Swift.max(number1.words.count, number2.words.count), xor.words.count)
	}
	
	func testTrailingBitCountShort() {
		let a = BigUInt.Words.Element.random(in: .min ... .max)
		let bigA = BigUInt(a)
		XCTAssertEqual(bigA.trailingZeroBitCount, a.trailingZeroBitCount)
		XCTAssertEqual(BigUInt(0).trailingZeroBitCount, BigUInt.Words.Element(0).trailingZeroBitCount)
	}
	
	func testTrailingBitCountMedium() {
		let count = Int.random(in: 100..<500)
		let string = "1" + String(repeating: "0", count: count)
		let number = BigUInt(string, radix: 2)!
		XCTAssertEqual(number.trailingZeroBitCount, count)
	}
	
	func testTrailingBitCountLong() {
		let count = Int.random(in: 1000..<10000)
		let string = "1" + String(repeating: "0", count: count)
		let number = BigUInt(string, radix: 2)!
		XCTAssertEqual(number.trailingZeroBitCount, count)
	}
	
	func testLeftShiftShort() {
		let a = BigUInt.Words.Element.random(in: .min ... .max)
		let bigA = BigUInt(a)
		let b = Int.random(in: 1..<BigUInt.Words.Element.bitWidth)
		let number = bigA << b
		XCTAssertEqual(number << 0, number)
		XCTAssertEqual(number.trailingZeroBitCount, bigA.trailingZeroBitCount + b)
	}
	
	func testLeftShiftMedium() {
		let string = BigUIntTests.genString(0..<10, 50)
		let number = BigUInt(string)!
		let b = Int.random(in: 1..<10) * BigUInt.Words.Element.bitWidth
		let shifted = number << b
		XCTAssertEqual(shifted.trailingZeroBitCount, number.trailingZeroBitCount + b)
	}
	
	func testLeftShiftLong() {
		let string = BigUIntTests.genString(0..<10, 5000)
		let number = BigUInt(string)!
		let b = Int.random(in: 1..<10) * BigUInt.Words.Element.bitWidth + Int.random(in: 1..<BigUInt.Words.Element.bitWidth)
		let shifted = number << b
		XCTAssertEqual(shifted.trailingZeroBitCount, number.trailingZeroBitCount + b)
	}
	
	func testRightShiftShort() {
		let shift = BigUInt.Words.Element.bitWidth - 1
		let a = BigUInt.Words.Element(1) << shift
		let bigA = BigUInt(a)
		let b = Int.random(in: 1..<BigUInt.Words.Element.bitWidth)
		let number = bigA >> b
		XCTAssertEqual(number >> 0, number)
		XCTAssertEqual(number.trailingZeroBitCount, shift - b)
	}
	
	func testRightShiftMedium() {
		let string = BigUIntTests.genString(0..<10, 50)
		let number = BigUInt(string)!
		let shift = 10 * BigUInt.Words.Element.bitWidth
		let b = Int.random(in: 1..<10) * BigUInt.Words.Element.bitWidth
		let shifted = (number << shift) >> b
		XCTAssertEqual(shifted.trailingZeroBitCount, number.trailingZeroBitCount + shift - b)
	}
	
	func testRightShiftLong() {
		let string = BigUIntTests.genString(0..<10, 5000)
		let number = BigUInt(string)!
		let shift = 11 * BigUInt.Words.Element.bitWidth - 1
		let b = Int.random(in: 1..<10) * BigUInt.Words.Element.bitWidth + Int.random(in: 1..<BigUInt.Words.Element.bitWidth)
		let shifted = (number << shift) >> b
		XCTAssertEqual(shifted.trailingZeroBitCount, number.trailingZeroBitCount + shift - b)
	}
	
	func testFactorialPerformance() {
		func recursiveMul(_ n: BigUInt, _ k: BigUInt) -> BigUInt {
			if n >= k - 1 { return k }
			let m = (n + k) >> 1
			return recursiveMul(n, m) * recursiveMul(m, k)
		}
		
		func factorial(_ n: BigUInt) -> BigUInt {
			return recursiveMul(0, n)
		}
		
		measure {
			_ = factorial(25_000)
		}
	}
}
